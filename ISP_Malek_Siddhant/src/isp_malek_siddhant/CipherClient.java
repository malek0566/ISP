/** ********************************************\
 * ISP Programming Project
 * By: Malek Alahmadi & Siddhant Gupta
 * \********************************************* */

/* In this part of the assignment, the client program CipherClient should (1) generate a DES key
and stores the key in a file, (2) encrypts the given String object using that key and sends the
encrypted object over the socket to the server. The server program CipherServer then uses
the key that was previously generated by the client to decrypt the incoming object. The server
obtains the key simply by reading it from the same file that the client previously generated.
The server should then print out the decrypted message.
 */

package isp_malek_siddhant;
import java.io.*;
import java.net.*;
import java.security.*;
import javax.crypto.*;

public class CipherClient
{
	public static void main(String[] args) throws Exception 
	{
		String message = "The quick brown fox jumps over the lazy dog.";
		int port = 7653;
	
		// YOU NEED TO DO THESE STEPS:
		// Generate a DES key.
                KeyGenerator keygenerator = KeyGenerator.getInstance("DES"); 
                keygenerator.init(new SecureRandom());
                Key myDesKey = keygenerator.generateKey();
		
                // Store it in a file.
                FileOutputStream file_out = new FileOutputStream("Key.dat");
		ObjectOutputStream O_out = new ObjectOutputStream(file_out);
		O_out.writeObject(myDesKey);
		O_out.close();
               
                // To pause a program
               /* System.out.print("The encryption key has been to written to the file, Please Press Enter to continue> ");
		Scanner in = new Scanner(System.in);
		in.nextLine();
		in.close();*/
                

		// -Use the key to encrypt the message above and send it over socket s to the server.
                Socket s = new Socket(InetAddress.getLoopbackAddress(), port);
		Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
		c.init(Cipher.ENCRYPT_MODE, myDesKey);
                 
                // Send ecrypted message to the server
		CipherOutputStream c_out = new CipherOutputStream(s.getOutputStream(), c);
                c_out.write(message.getBytes());
		c_out.flush();
		c_out.close();
		s.close();

                
             
                
	}
}